// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: questions.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getQuestionsByUserID = `-- name: GetQuestionsByUserID :many
SELECT
    questions.id,
    questions.user_id,
    questions.prompt,
    questions.time,
    question_choices.id as choice_id,
    question_choices.text as choice_text
FROM questions
LEFT JOIN question_choices ON questions.id = question_choices.question_id
WHERE questions.user_id = $1
`

type GetQuestionsByUserIDRow struct {
	ID         uuid.UUID   `json:"id"`
	UserID     uuid.UUID   `json:"user_id"`
	Prompt     string      `json:"prompt"`
	Time       int32       `json:"time"`
	ChoiceID   pgtype.UUID `json:"choice_id"`
	ChoiceText pgtype.Text `json:"choice_text"`
}

func (q *Queries) GetQuestionsByUserID(ctx context.Context, userID uuid.UUID) ([]GetQuestionsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getQuestionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetQuestionsByUserIDRow{}
	for rows.Next() {
		var i GetQuestionsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Prompt,
			&i.Time,
			&i.ChoiceID,
			&i.ChoiceText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
