// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: prompts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPrompt = `-- name: CreatePrompt :one
INSERT INTO prompts (user_id) VALUES ($1) RETURNING id, user_id, editor_state, created_at, updated_at
`

func (q *Queries) CreatePrompt(ctx context.Context, userID uuid.UUID) (Prompt, error) {
	row := q.db.QueryRow(ctx, createPrompt, userID)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EditorState,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePrompt = `-- name: DeletePrompt :exec
DELETE FROM prompts WHERE id = $1
`

func (q *Queries) DeletePrompt(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePrompt, id)
	return err
}

const getPromptsByUserID = `-- name: GetPromptsByUserID :many
SELECT id, user_id, editor_state, created_at, updated_at FROM prompts WHERE user_id = $1
`

func (q *Queries) GetPromptsByUserID(ctx context.Context, userID uuid.UUID) ([]Prompt, error) {
	rows, err := q.db.Query(ctx, getPromptsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prompt{}
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EditorState,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrompt = `-- name: UpdatePrompt :one
UPDATE prompts Set editor_state = $1 WHERE id = $2 RETURNING id, user_id, editor_state, created_at, updated_at
`

type UpdatePromptParams struct {
	EditorState pgtype.Text `json:"editor_state"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdatePrompt(ctx context.Context, arg UpdatePromptParams) (Prompt, error) {
	row := q.db.QueryRow(ctx, updatePrompt, arg.EditorState, arg.ID)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EditorState,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
