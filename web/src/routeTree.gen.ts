/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as UserRouteRouteImport } from './routes/user/route'
import { Route as GameRouteRouteImport } from './routes/game/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GameIndexRouteImport } from './routes/game/index'
import { Route as UserSettingsRouteImport } from './routes/user/settings'
import { Route as GameGameIDRouteImport } from './routes/game/$gameID'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const UserRouteRoute = UserRouteRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const GameRouteRoute = GameRouteRouteImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GameIndexRoute = GameIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GameRouteRoute,
} as any)
const UserSettingsRoute = UserSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => UserRouteRoute,
} as any)
const GameGameIDRoute = GameGameIDRouteImport.update({
  id: '/$gameID',
  path: '/$gameID',
  getParentRoute: () => GameRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/game': typeof GameRouteRouteWithChildren
  '/user': typeof UserRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/game/$gameID': typeof GameGameIDRoute
  '/user/settings': typeof UserSettingsRoute
  '/game/': typeof GameIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/user': typeof UserRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/game/$gameID': typeof GameGameIDRoute
  '/user/settings': typeof UserSettingsRoute
  '/game': typeof GameIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/game': typeof GameRouteRouteWithChildren
  '/user': typeof UserRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/game/$gameID': typeof GameGameIDRoute
  '/user/settings': typeof UserSettingsRoute
  '/game/': typeof GameIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/game'
    | '/user'
    | '/login'
    | '/game/$gameID'
    | '/user/settings'
    | '/game/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/user' | '/login' | '/game/$gameID' | '/user/settings' | '/game'
  id:
    | '__root__'
    | '/'
    | '/game'
    | '/user'
    | '/login'
    | '/game/$gameID'
    | '/user/settings'
    | '/game/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GameRouteRoute: typeof GameRouteRouteWithChildren
  UserRouteRoute: typeof UserRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/game/': {
      id: '/game/'
      path: '/'
      fullPath: '/game/'
      preLoaderRoute: typeof GameIndexRouteImport
      parentRoute: typeof GameRouteRoute
    }
    '/user/settings': {
      id: '/user/settings'
      path: '/settings'
      fullPath: '/user/settings'
      preLoaderRoute: typeof UserSettingsRouteImport
      parentRoute: typeof UserRouteRoute
    }
    '/game/$gameID': {
      id: '/game/$gameID'
      path: '/$gameID'
      fullPath: '/game/$gameID'
      preLoaderRoute: typeof GameGameIDRouteImport
      parentRoute: typeof GameRouteRoute
    }
  }
}

interface GameRouteRouteChildren {
  GameGameIDRoute: typeof GameGameIDRoute
  GameIndexRoute: typeof GameIndexRoute
}

const GameRouteRouteChildren: GameRouteRouteChildren = {
  GameGameIDRoute: GameGameIDRoute,
  GameIndexRoute: GameIndexRoute,
}

const GameRouteRouteWithChildren = GameRouteRoute._addFileChildren(
  GameRouteRouteChildren,
)

interface UserRouteRouteChildren {
  UserSettingsRoute: typeof UserSettingsRoute
}

const UserRouteRouteChildren: UserRouteRouteChildren = {
  UserSettingsRoute: UserSettingsRoute,
}

const UserRouteRouteWithChildren = UserRouteRoute._addFileChildren(
  UserRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GameRouteRoute: GameRouteRouteWithChildren,
  UserRouteRoute: UserRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
