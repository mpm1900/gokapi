/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as UserRouteRouteImport } from './routes/user/route'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as UserSettingsRouteImport } from './routes/user/settings'
import { Route as AppGameIDRouteImport } from './routes/app/$gameID'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const UserRouteRoute = UserRouteRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const UserSettingsRoute = UserSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => UserRouteRoute,
} as any)
const AppGameIDRoute = AppGameIDRouteImport.update({
  id: '/$gameID',
  path: '/$gameID',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/user': typeof UserRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/app/$gameID': typeof AppGameIDRoute
  '/user/settings': typeof UserSettingsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/user': typeof UserRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/app/$gameID': typeof AppGameIDRoute
  '/user/settings': typeof UserSettingsRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/user': typeof UserRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/app/$gameID': typeof AppGameIDRoute
  '/user/settings': typeof UserSettingsRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/user'
    | '/login'
    | '/app/$gameID'
    | '/user/settings'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/user' | '/login' | '/app/$gameID' | '/user/settings' | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/user'
    | '/login'
    | '/app/$gameID'
    | '/user/settings'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  UserRouteRoute: typeof UserRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/user/settings': {
      id: '/user/settings'
      path: '/settings'
      fullPath: '/user/settings'
      preLoaderRoute: typeof UserSettingsRouteImport
      parentRoute: typeof UserRouteRoute
    }
    '/app/$gameID': {
      id: '/app/$gameID'
      path: '/$gameID'
      fullPath: '/app/$gameID'
      preLoaderRoute: typeof AppGameIDRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppGameIDRoute: typeof AppGameIDRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppGameIDRoute: AppGameIDRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface UserRouteRouteChildren {
  UserSettingsRoute: typeof UserSettingsRoute
}

const UserRouteRouteChildren: UserRouteRouteChildren = {
  UserSettingsRoute: UserSettingsRoute,
}

const UserRouteRouteWithChildren = UserRouteRoute._addFileChildren(
  UserRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  UserRouteRoute: UserRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
